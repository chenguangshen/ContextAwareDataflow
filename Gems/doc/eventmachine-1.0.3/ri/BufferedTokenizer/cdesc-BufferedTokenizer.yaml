--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: BufferedTokenizer takes a delimiter upon instantiation, or acts line-based by default. It allows input to be spoon-fed from some outside source which receives arbitrary length datagrams which may-or-may-not contain the token by which entities are delimited.
- !ruby/struct:SM::Flow::P 
  body: By default, new BufferedTokenizers will operate on lines delimited by &quot;\n&quot; by default or allow you to specify any delimiter token you so choose, which will then be used by String#split to tokenize the input data
- !ruby/struct:SM::Flow::P 
  body: "@example Using BufferedTokernizer to parse lines out of incoming data"
- !ruby/struct:SM::Flow::VERB 
  body: "  module LineBufferedConnection\n    def receive_data(data)\n      (@buffer ||= BufferedTokenizer.new).extract(data).each do |line|\n        receive_line(line)\n      end\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "@author Tony Arcieri @author Martin Emde"
constants: []

full_name: BufferedTokenizer
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: empty?
- !ruby/object:RI::MethodSummary 
  name: extract
- !ruby/object:RI::MethodSummary 
  name: flush
name: BufferedTokenizer
superclass: Object
