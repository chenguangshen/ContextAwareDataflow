--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Initiates a TCP connection to a remote server and sets up event handling for the connection. {EventMachine.connect} requires event loop to be running (see {EventMachine.run}).
- !ruby/struct:SM::Flow::P 
  body: "{EventMachine.connect} takes the IP address (or hostname) and port of the remote server you want to connect to. It also takes an optional handler (a module or a subclass of {EventMachine::Connection}) which you must define, that contains the callbacks that will be invoked by the event loop on behalf of the connection."
- !ruby/struct:SM::Flow::P 
  body: Learn more about connection lifecycle callbacks in the {file:docs/GettingStarted.md EventMachine tutorial} and {file:docs/ConnectionLifecycleCallbacks.md Connection lifecycle guide}.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: " # Here's a program which connects to a web server, sends a naive\n # request, parses the HTTP header of the response, and then\n # (antisocially) ends the event loop, which automatically drops the connection\n # (and incidentally calls the connection's unbind method).\n module DumbHttpClient\n   def post_init\n     send_data &quot;GET / HTTP/1.1\\r\\nHost: _\\r\\n\\r\\n&quot;\n     @data = &quot;&quot;\n     @parsed = false\n   end\n\n   def receive_data data\n     @data &lt;&lt; data\n     if !@parsed and @data =~ /[\\n][\\r]*[\\n]/m\n       @parsed = true\n       puts &quot;RECEIVED HTTP HEADER:&quot;\n       $`.each {|line| puts &quot;&gt;&gt;&gt; #{line}&quot; }\n\n       puts &quot;Now we'll terminate the loop, which will also close the connection&quot;\n       EventMachine::stop_event_loop\n     end\n   end\n\n   def unbind\n     puts &quot;A connection has terminated&quot;\n   end\n end\n\n EventMachine.run {\n   EventMachine.connect &quot;www.bayshorenetworks.com&quot;, 80, DumbHttpClient\n }\n puts &quot;The event loop has ended&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "@example Defining protocol handler as a class"
- !ruby/struct:SM::Flow::VERB 
  body: " class MyProtocolHandler &lt; EventMachine::Connection\n   def initialize *args\n     super\n     # whatever else you want to do here\n   end\n\n   # ...\n end\n"
- !ruby/struct:SM::Flow::P 
  body: "@param [String] server Host to connect to @param [Integer] port Port to connect to @param [Module, Class] handler A module or class that implements connection lifecycle callbacks"
- !ruby/struct:SM::Flow::P 
  body: "@see EventMachine.start_server @see file:docs/GettingStarted.md EventMachine tutorial"
full_name: EventMachine::connect
is_singleton: true
name: connect
params: (server, port=nil, handler=nil, *args, &blk)
visibility: public
