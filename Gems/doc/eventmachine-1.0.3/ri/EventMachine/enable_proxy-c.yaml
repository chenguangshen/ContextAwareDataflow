--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: This method allows for direct writing of incoming data back out to another descriptor, at the C++ level in the reactor. This is very efficient and especially useful for proxies where high performance is required. Propogating data from a server response all the way up to Ruby, and then back down to the reactor to be sent back to the client, is often unnecessary and incurs a significant performance decrease.
- !ruby/struct:SM::Flow::P 
  body: The two arguments are instance of {EventMachine::Connection} subclasses, 'from' and 'to'. 'from' is the connection whose inbound data you want relayed back out. 'to' is the connection to write it to.
- !ruby/struct:SM::Flow::P 
  body: Once you call this method, the 'from' connection will no longer get receive_data callbacks from the reactor, except in the case that 'to' connection has already closed when attempting to write to it. You can see in the example, that proxy_target_unbound will be called when this occurs. After that, further incoming data will be passed into receive_data as normal.
- !ruby/struct:SM::Flow::P 
  body: "Note also that this feature supports different types of descriptors: TCP, UDP, and pipes. You can relay data from one kind to another, for example, feed a pipe from a UDP stream."
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: " module ProxyConnection\n   def initialize(client, request)\n     @client, @request = client, request\n   end\n\n   def post_init\n     EM::enable_proxy(self, @client)\n   end\n\n   def connection_completed\n     send_data @request\n   end\n\n   def proxy_target_unbound\n     close_connection\n   end\n\n   def unbind\n     @client.close_connection_after_writing\n   end\n end\n\n module ProxyServer\n   def receive_data(data)\n     (@buf ||= &quot;&quot;) &lt;&lt; data\n     if @buf =~ /\\r\\n\\r\\n/ # all http headers received\n       EventMachine.connect(&quot;10.0.0.15&quot;, 80, ProxyConnection, self, data)\n     end\n   end\n end\n\n EventMachine.run {\n   EventMachine.start_server(&quot;127.0.0.1&quot;, 8080, ProxyServer)\n }\n"
- !ruby/struct:SM::Flow::P 
  body: "@param [EventMachine::Connection] from Source of data to be proxies/streamed. @param [EventMachine::Connection] to Destination of data to be proxies/streamed. @param [Integer] bufsize Buffer size to use @param [Integer] length Maximum number of bytes to proxy."
- !ruby/struct:SM::Flow::P 
  body: "@see EventMachine.disable_proxy"
full_name: EventMachine::enable_proxy
is_singleton: true
name: enable_proxy
params: (from, to, bufsize=0, length=0)
visibility: public
