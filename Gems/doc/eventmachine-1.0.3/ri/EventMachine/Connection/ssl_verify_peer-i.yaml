--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Called by EventMachine when :verify_peer =&gt; true has been passed to {#start_tls}. It will be called with each certificate in the certificate chain provided by the remote peer.
- !ruby/struct:SM::Flow::P 
  body: The cert will be passed as a String in PEM format, the same as in {#get_peer_cert}. It is up to user defined code to perform a check on the certificates. The return value from this callback is used to accept or deny the peer. A return value that is not nil or false triggers acceptance. If the peer is not accepted, the connection will be subsequently closed.
- !ruby/struct:SM::Flow::P 
  body: "@example This server always accepts all peers"
- !ruby/struct:SM::Flow::VERB 
  body: "  module AcceptServer\n    def post_init\n      start_tls(:verify_peer =&gt; true)\n    end\n\n    def ssl_verify_peer(cert)\n      true\n    end\n\n    def ssl_handshake_completed\n      $server_handshake_completed = true\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "@example This server never accepts any peers"
- !ruby/struct:SM::Flow::VERB 
  body: "  module DenyServer\n    def post_init\n      start_tls(:verify_peer =&gt; true)\n    end\n\n    def ssl_verify_peer(cert)\n      # Do not accept the peer. This should now cause the connection to shut down\n      # without the SSL handshake being completed.\n      false\n    end\n\n    def ssl_handshake_completed\n      $server_handshake_completed = true\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "@see #start_tls"
full_name: EventMachine::Connection#ssl_verify_peer
is_singleton: false
name: ssl_verify_peer
params: (cert)
visibility: public
