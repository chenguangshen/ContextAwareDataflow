--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: called by the framework whenever a connection (either a server or client connection) is closed. The close can occur because your code intentionally closes it (using {#close_connection} and {#close_connection_after_writing}), because the remote peer closed the connection, or because of a network error. You may not assume that the network connection is still open and able to send or receive data when the callback to unbind is made. This is intended only to give you a chance to clean up associations your code may have made to the connection object while it was open.
- !ruby/struct:SM::Flow::P 
  body: If you want to detect which peer has closed the connection, you can override {#close_connection} in your protocol handler and set an @ivar.
- !ruby/struct:SM::Flow::P 
  body: "@example Overriding Connection#close_connection to distinguish connections closed on our side"
- !ruby/struct:SM::Flow::VERB 
  body: "  class MyProtocolHandler &lt; EventMachine::Connection\n\n    # ...\n\n    def close_connection(*args)\n      @intentionally_closed_connection = true\n      super(*args)\n    end\n\n    def unbind\n      if @intentionally_closed_connection\n        # ...\n      end\n    end\n\n    # ...\n\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "@see #post_init @see #connection_completed @see file:docs/GettingStarted.md EventMachine tutorial"
full_name: EventMachine::Connection#unbind
is_singleton: false
name: unbind
params: ()
visibility: public
