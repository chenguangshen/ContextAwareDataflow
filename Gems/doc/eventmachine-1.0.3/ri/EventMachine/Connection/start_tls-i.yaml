--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Call {#start_tls} at any point to initiate TLS encryption on connected streams. The method is smart enough to know whether it should perform a server-side or a client-side handshake. An appropriate place to call {#start_tls} is in your redefined {#post_init} method, or in the {#connection_completed} handler for an outbound connection.
- !ruby/struct:SM::Flow::P 
  body: "@option args [String] :cert_chain_file (nil) local path of a readable file that contants a chain of X509 certificates in"
- !ruby/struct:SM::Flow::VERB 
  body: "                                             the [PEM format](http://en.wikipedia.org/wiki/Privacy_Enhanced_Mail),\n                                             with the most-resolved certificate at the top of the file, successive intermediate\n                                             certs in the middle, and the root (or CA) cert at the bottom.\n"
- !ruby/struct:SM::Flow::P 
  body: "@option args [String] :private_key_file (nil) local path of a readable file that must contain a private key in the [PEM format](http://en.wikipedia.org/wiki/Privacy_Enhanced_Mail)."
- !ruby/struct:SM::Flow::P 
  body: "@option args [String] :verify_peer (false) indicates whether a server should request a certificate from a peer, to be verified by user code."
- !ruby/struct:SM::Flow::VERB 
  body: "                                              If true, the {#ssl_verify_peer} callback on the {EventMachine::Connection} object is called with each certificate\n                                              in the certificate chain provided by the peer. See documentation on {#ssl_verify_peer} for how to use this.\n"
- !ruby/struct:SM::Flow::P 
  body: "@example Using TLS with EventMachine"
- !ruby/struct:SM::Flow::VERB 
  body: " require 'rubygems'\n require 'eventmachine'\n\n module Handler\n   def post_init\n     start_tls(:private_key_file =&gt; '/tmp/server.key', :cert_chain_file =&gt; '/tmp/server.crt', :verify_peer =&gt; false)\n   end\n end\n\n  EventMachine.run do\n   EventMachine.start_server(&quot;127.0.0.1&quot;, 9999, Handler)\n end\n"
- !ruby/struct:SM::Flow::P 
  body: "@param [Hash] args"
- !ruby/struct:SM::Flow::P 
  body: "@todo support passing an encryption parameter, which can be string or Proc, to get a passphrase for encrypted private keys. @todo support passing key material via raw strings or Procs that return strings instead of just filenames."
- !ruby/struct:SM::Flow::P 
  body: "@see #ssl_verify_peer"
full_name: EventMachine::Connection#start_tls
is_singleton: false
name: start_tls
params: (args={})
visibility: public
