--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: ":host =&gt; required String"
- !ruby/struct:SM::Flow::VERB 
  body: "  a string containing the IP address or host name of the SMTP server to connect to.\n"
- !ruby/struct:SM::Flow::P 
  body: ":port =&gt; optional"
- !ruby/struct:SM::Flow::VERB 
  body: "  defaults to 25.\n"
- !ruby/struct:SM::Flow::P 
  body: ":domain =&gt; required String"
- !ruby/struct:SM::Flow::VERB 
  body: "  This is passed as the argument to the EHLO command.\n"
- !ruby/struct:SM::Flow::P 
  body: ":starttls =&gt; optional Boolean"
- !ruby/struct:SM::Flow::VERB 
  body: "  If it evaluates true, then the client will initiate STARTTLS with\n  the server, and abort the connection if the negotiation doesn't succeed.\n  TODO, need to be able to pass certificate parameters with this option.\n"
- !ruby/struct:SM::Flow::P 
  body: ":auth =&gt; optional Hash of auth parameters"
- !ruby/struct:SM::Flow::VERB 
  body: "  If not given, then no auth will be attempted.\n  (In that case, the connection will be aborted if the server requires auth.)\n  Specify the hash value :type to determine the auth type, along with additional parameters\n  depending on the type.\n  Currently only :type =&gt; :plain is supported. Pass additional parameters :username (String),\n  and :password (either a String or a Proc that will be called at auth-time).\n\n  @example\n    :auth =&gt; {:type=&gt;:plain, :username=&gt;&quot;mickey@disney.com&quot;, :password=&gt;&quot;mouse&quot;}\n"
- !ruby/struct:SM::Flow::P 
  body: ":from =&gt; required String"
- !ruby/struct:SM::Flow::VERB 
  body: "  Specifies the sender of the message. Will be passed as the argument\n  to the MAIL FROM. Do NOT enclose the argument in angle-bracket (&lt;&gt;) characters.\n  The connection will abort if the server rejects the value.\n"
- !ruby/struct:SM::Flow::P 
  body: ":to =&gt; required String or Array of Strings"
- !ruby/struct:SM::Flow::VERB 
  body: "  The recipient(s) of the message. Do NOT enclose\n  any of the values in angle-brackets (&lt;&gt;) characters. It's NOT a fatal error if one or more\n  recipients are rejected by the server. (Of course, if ALL of them are, the server will most\n  likely trigger an error when we try to send data.) An array of codes containing the status\n  of each requested recipient is available after the call completes. TODO, we should define\n  an overridable stub that will be called on rejection of a recipient or a sender, giving\n  user code the chance to try again or abort the connection.\n"
- !ruby/struct:SM::Flow::P 
  body: ":header =&gt; Required hash of values to be transmitted in the header of the message."
- !ruby/struct:SM::Flow::VERB 
  body: "  The hash keys are the names of the headers (do NOT append a trailing colon), and the values are strings\n  containing the header values. TODO, support Arrays of header values, which would cause us to\n  send that specific header line more than once.\n\n  @example\n    :header =&gt; {&quot;Subject&quot; =&gt; &quot;Bogus&quot;, &quot;CC&quot; =&gt; &quot;myboss@example.com&quot;}\n"
- !ruby/struct:SM::Flow::P 
  body: ":body =&gt; Optional string, defaults blank."
- !ruby/struct:SM::Flow::VERB 
  body: "  This will be passed as the body of the email message.\n  TODO, this needs to be significantly beefed up. As currently written, this requires the caller\n  to properly format the input into CRLF-delimited lines of 7-bit characters in the standard\n  SMTP transmission format. We need to be able to automatically convert binary data, and add\n  correct line-breaks to text data. I think the :body parameter should remain as it is, and we\n  should add a :content parameter that contains autoconversions and/or conversion parameters.\n  Then we can check if either :body or :content is present and do the right thing.\n"
- !ruby/struct:SM::Flow::P 
  body: ":content =&gt; Optional array or string"
- !ruby/struct:SM::Flow::VERB 
  body: "  Alternative to providing header and body, an array or string of raw data which MUST be in\n  correct SMTP body format, including a trailing dot line\n"
- !ruby/struct:SM::Flow::P 
  body: ":verbose =&gt; Optional."
- !ruby/struct:SM::Flow::VERB 
  body: "  If true, will cause a lot of information (including the server-side of the\n  conversation) to be dumped to $&gt;.\n"
full_name: EventMachine::Protocols::SmtpClient::send
is_singleton: true
name: send
params: (args={})
visibility: public
