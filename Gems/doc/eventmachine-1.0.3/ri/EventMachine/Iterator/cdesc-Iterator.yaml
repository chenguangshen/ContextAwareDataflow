--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: concurrency
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: A simple iterator for concurrent asynchronous work.
- !ruby/struct:SM::Flow::P 
  body: "Unlike ruby's built-in iterators, the end of the current iteration cycle is signaled manually, instead of happening automatically after the yielded block finishes executing. For example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  (0..10).each{ |num| }\n"
- !ruby/struct:SM::Flow::P 
  body: "becomes:"
- !ruby/struct:SM::Flow::VERB 
  body: "  EM::Iterator.new(0..10).each{ |num,iter| iter.next }\n"
- !ruby/struct:SM::Flow::P 
  body: "This is especially useful when doing asynchronous work via reactor libraries and functions. For example, given a sync and async http api:"
- !ruby/struct:SM::Flow::VERB 
  body: "  response = sync_http_get(url); ...\n  async_http_get(url){ |response| ... }\n"
- !ruby/struct:SM::Flow::P 
  body: "a synchronous iterator such as:"
- !ruby/struct:SM::Flow::VERB 
  body: "  responses = urls.map{ |url| sync_http_get(url) }\n  ...\n  puts 'all done!'\n"
- !ruby/struct:SM::Flow::P 
  body: "could be written as:"
- !ruby/struct:SM::Flow::VERB 
  body: "  EM::Iterator.new(urls).map(proc{ |url,iter|\n    async_http_get(url){ |res|\n      iter.return(res)\n    }\n  }, proc{ |responses|\n    ...\n    puts 'all done!'\n  })\n"
- !ruby/struct:SM::Flow::P 
  body: "Now, you can take advantage of the asynchronous api to issue requests in parallel. For example, to fetch 10 urls at a time, simply pass in a concurrency of 10:"
- !ruby/struct:SM::Flow::VERB 
  body: "  EM::Iterator.new(urls, 10).each do |url,iter|\n    async_http_get(url){ iter.next }\n  end\n"
constants: []

full_name: EventMachine::Iterator
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: concurrency=
- !ruby/object:RI::MethodSummary 
  name: each
- !ruby/object:RI::MethodSummary 
  name: inject
- !ruby/object:RI::MethodSummary 
  name: map
name: Iterator
superclass: Object
