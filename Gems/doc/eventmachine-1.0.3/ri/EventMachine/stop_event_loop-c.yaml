--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Causes the processing loop to stop executing, which will cause all open connections and accepting servers to be run down and closed. Connection termination callbacks added using {EventMachine.add_shutdown_hook} will be called as part of running this method.
- !ruby/struct:SM::Flow::P 
  body: When all of this processing is complete, the call to {EventMachine.run} which started the processing loop will return and program flow will resume from the statement following {EventMachine.run} call.
- !ruby/struct:SM::Flow::P 
  body: "@example Stopping a running EventMachine event loop"
- !ruby/struct:SM::Flow::VERB 
  body: " require 'rubygems'\n require 'eventmachine'\n\n module Redmond\n   def post_init\n     puts &quot;We're sending a dumb HTTP request to the remote peer.&quot;\n     send_data &quot;GET / HTTP/1.1\\r\\nHost: www.microsoft.com\\r\\n\\r\\n&quot;\n   end\n\n   def receive_data data\n     puts &quot;We received #{data.length} bytes from the remote peer.&quot;\n     puts &quot;We're going to stop the event loop now.&quot;\n     EventMachine::stop_event_loop\n   end\n\n   def unbind\n     puts &quot;A connection has terminated.&quot;\n   end\n end\n\n puts &quot;We're starting the event loop now.&quot;\n EventMachine.run {\n   EventMachine.connect &quot;www.microsoft.com&quot;, 80, Redmond\n }\n puts &quot;The event loop has stopped.&quot;\n\n # This program will produce approximately the following output:\n #\n # We're starting the event loop now.\n # We're sending a dumb HTTP request to the remote peer.\n # We received 1440 bytes from the remote peer.\n # We're going to stop the event loop now.\n # A connection has terminated.\n # The event loop has stopped.\n"
full_name: EventMachine::stop_event_loop
is_singleton: true
name: stop_event_loop
params: ()
visibility: public
