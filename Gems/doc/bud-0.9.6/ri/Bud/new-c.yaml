--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: options to the Bud runtime are passed in a hash, with the following keys
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: network configuration
  - !ruby/object:SM::Flow::LIST 
    contents: 
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:ip</tt> IP address string for this instance
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:port</tt> port number for this instance
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:ext_ip</tt> IP address at which external nodes can contact this instance
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:ext_port</tt> port number to go with <tt>:ext_ip</tt>
    type: :BULLET
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: operating system interaction
  - !ruby/object:SM::Flow::LIST 
    contents: 
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:stdin</tt> if non-nil, reading from the <tt>stdio</tt> collection results in reading from this <tt>IO</tt> handle
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:stdout</tt> writing to the <tt>stdio</tt> collection results in writing to this <tt>IO</tt> handle; defaults to <tt>$stdout</tt>
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:signal_handling</tt> how to handle <tt>SIGINT</tt> and <tt>SIGTERM</tt>. If +:none+, these signals are ignored. Else shutdown all bud instances.
    type: :BULLET
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: tracing and output
  - !ruby/object:SM::Flow::LIST 
    contents: 
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:quiet</tt> if true, suppress certain messages
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:trace</tt> if true, generate <tt>budvis</tt> outputs
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:rtrace</tt> if true, generate <tt>budplot</tt> outputs
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:dump_rewrite</tt> if true, dump results of internal rewriting of Bloom code to a file
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:print_wiring</tt> if true, print the wiring diagram of the program to stdout
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:metrics</tt> if true, dumps a hash of internal performance metrics
    type: :BULLET
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: controlling execution
  - !ruby/object:SM::Flow::LIST 
    contents: 
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:tag</tt> a name for this instance, suitable for display during tracing and visualization
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:channel_filter</tt> a code block that can be used to filter the network messages delivered to this Bud instance. At the start of each tick, the code block is invoked for every channel with any incoming messages; the code block is passed the name of the channel and an array containing the inbound messages. It should return a two-element array containing &quot;accepted&quot; and &quot;postponed&quot; messages, respectively. Accepted messages are delivered during this tick, and postponed messages are buffered and passed to the filter in subsequent ticks. Any messages that aren't in either array are dropped.
    type: :BULLET
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: storage configuration
  - !ruby/object:SM::Flow::LIST 
    contents: 
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:dbm_dir</tt> filesystem directory to hold DBM-backed collections
    - !ruby/struct:SM::Flow::LI 
      label: "*"
      body: <tt>:dbm_truncate</tt> if true, DBM-backed collections are opened with <tt>OTRUNC</tt>
    type: :BULLET
  type: :BULLET
full_name: Bud::new
is_singleton: true
name: new
params: (options={})
visibility: public
